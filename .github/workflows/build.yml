name: Standalone executable applications

on:
  push:
    branches: [main]
    paths-ignore:
      - 'application/**'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: [3.12]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Check commit messages for 'Build'
      id: commit-message-check
      run: |
        $contains_build = git log --grep='Build' --format=%B -n 1
        if ($null -ne $contains_build) {
            echo "::set-output name=contains_build::true"
        } else {
            echo "::set-output name=contains_build::false"
        }
      shell: pwsh

    - name: Create application directory
      if: steps.commit-message-check.outputs.contains_build == 'true'
      run: |
        if ($env:RUNNER_OS -eq 'Windows') {
          if (Test-Path application\${{ runner.os }}.exe) {
            rmdir -Force -Recurse application\${{ runner.os }}.exe
          }
        } elseif ($env:RUNNER_OS -eq 'Linux') {
          rm -rf application/${{ runner.os }}
        } else {
          rm -rf application/${{ runner.os }}.tar.gz
        }
        if (-not (Test-Path -Path application/)) {
          New-Item -Path application/ -ItemType Directory
        }
      shell: pwsh

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      if: steps.commit-message-check.outputs.contains_build == 'true'
      run: |
        pip install pyinstaller pillow numpy matplotlib PyQt5 perlin_noise

    - name: Build executable
      if: steps.commit-message-check.outputs.contains_build == 'true'
      run: |
        pyinstaller executable.py -F -w -n ${{ runner.os }} --add-data "src/biosim/_static/*.png:." --icon "src/biosim/_static/icon.ico" --distpath dist -p biosim
        if ($env:RUNNER_OS -eq 'Windows') {
          mv dist/${{ runner.os }}.exe application/
        } elseif ($env:RUNNER_OS -eq 'Linux') {
          mv dist/${{ runner.os }} application/
        } else {
          mv dist/${{ runner.os }}.app application/
        }
      shell: pwsh

    - name: Upload executable
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}
        path: application/

    - name: Commit and push executable
      if: steps.commit-message-check.outputs.contains_build == 'true'
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        if ($env:RUNNER_OS -eq 'Windows') {
          git lfs untrack application/${{ runner.os }}.exe
          git rm --cached application/${{ runner.os }}.exe
          if ((Get-Item application/${{ runner.os }}.exe).length / 1MB -gt 100) {
            git lfs track application/${{ runner.os }}.exe
          }
          git add application/${{ runner.os }}.exe
        } elseif ($env:RUNNER_OS -eq 'Linux') {
          git lfs untrack application/${{ runner.os }}
          git rm --cached application/${{ runner.os }}
          if (($(du -sm application/${{ runner.os }} | cut -f1)) -gt 100) {
            git lfs track application/${{ runner.os }}
          }
          git add application/${{ runner.os }}
        } else {
          tar -czf application/${{ runner.os }}.tar.gz application/${{ runner.os }}.app
          git lfs untrack application/${{ runner.os }}.tar.gz
          git rm --cached application/${{ runner.os }}.tar.gz
          if (($(du -sm application/${{ runner.os }}.tar.gz | cut -f1)) -gt 100) {
            git lfs track application/${{ runner.os }}.tar.gz
          }
          git add application/${{ runner.os }}.tar.gz
        }
        git commit -m "${{ runner.os }}"
        git diff --quiet && git diff --staged --quiet || git commit -m "${{ runner.os }}"
        
        git fetch origin main
        git merge origin/main -m "${{ runner.os }}"
        
        git pull --rebase origin main
        while($true) {
          $pushOutput = git push https://github.com/hallvardnmbu/ecosystem.git main 2>&1
          if ($pushOutput -match "remote rejected") {
            Write-Output "Push rejected by remote repository, retrying in 5 seconds..."
            Start-Sleep -Seconds 5
            git pull --rebase origin main
          } elseif ($pushOutput -match "everything up-to-date") {
            Write-Output "No changes to push, exiting loop..."
            break
          } else {
            Write-Output "Push successful, exiting loop..."
            break
          }
        }
      shell: pwsh
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
