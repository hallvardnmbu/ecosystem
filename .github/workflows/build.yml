name: Standalone executable applications

on:
  push:
    branches: [main]
    paths-ignore:
      - 'application/**'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write

    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: [3.12]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Check if commit message contains 'Build'
      id: messages
      run: |
        if (git log --oneline --grep="Build" -1) {
            echo "::set-output name=build::true"
        } else {
            echo "::set-output name=build::false"
        }
      shell: pwsh
      env:
        GITHUB_ENV: ${{ github.env }}

    - name: Create application directory
      if: ${{ steps.messages.outputs.build == 'true' }}
      run: |
        if (-not (Test-Path -Path application/)) {
          New-Item -Path application/ -ItemType Directory
        }
      shell: pwsh
      env:
        GITHUB_ENV: ${{ github.env }}

    - name: Set up Python ${{ matrix.python-version }}
      if: ${{ steps.messages.outputs.build == 'true' }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
      env:
        GITHUB_ENV: ${{ github.env }}

    - name: Install dependencies
      if: ${{ steps.messages.outputs.build == 'true' }}
      run: |
        pip install pyinstaller pillow numpy matplotlib PyQt5 perlin_noise
      env:
        GITHUB_ENV: ${{ github.env }}

    - name: Build executable
      if: ${{ steps.messages.outputs.build == 'true' }}
      run: |
        pyinstaller executable.py -F -w -n ${{ runner.os }} --add-data "src/biosim/_static/*.png:." --icon "src/biosim/_static/icon.ico" --distpath dist -p biosim
        if ($env:RUNNER_OS -eq 'Windows') {
          mv dist/${{ runner.os }}.exe application/
        } elseif ($env:RUNNER_OS -eq 'Linux') {
          mv dist/${{ runner.os }} application/
        } else {
          mv dist/${{ runner.os }}.app application/
        }
      shell: pwsh
      env:
        GITHUB_ENV: ${{ github.env }}

    - name: Commit and push executable
      if: ${{ steps.messages.outputs.build == 'true' }}
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        
        git fetch origin main
        
        if ($env:RUNNER_OS -eq 'Windows') {
          $filePath = "application/${{ runner.os }}.exe"
          $fileSize = (Get-Item $filePath).length / 1MB
        } elseif ($env:RUNNER_OS -eq 'Linux') {
          $filePath = "application/${{ runner.os }}"
          $fileSize = $(du -sm $filePath | cut -f1)
        } else {
          tar -czf application/${{ runner.os }}.tar.gz application/${{ runner.os }}.app
          $filePath = "application/${{ runner.os }}.tar.gz"
          $fileSize = $(du -sm $filePath | cut -f1)
        }
        
        if ($fileSize -gt 100) {
          git lfs track $filePath
        }
        git add $filePath
        git commit -m "${{ runner.os }}"
        
        git pull --rebase origin main
        
        while($true) {
          $pushOutput = git push origin --force --all 2>&1
          if ($pushOutput -match "remote rejected") {
            Write-Output "Push rejected by remote repository, retrying in 5 seconds..."
            Start-Sleep -Seconds 5
            git pull --rebase origin main
          } elseif ($pushOutput -match "everything up-to-date") {
            Write-Output "No changes to push, exiting loop..."
            break
          } else {
            Write-Output "Push successful, exiting loop..."
            break
          }
        }
        
        git push origin --force --tags
      shell: pwsh
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ENV: ${{ github.env }}
